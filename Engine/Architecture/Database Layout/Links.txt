
Database Table: CodeDB.Links
_______________________________________________________________________________

The table that stores all the links found by Natural Docs.



Group: Columns
_______________________________________________________________________________


Database Column: LinkID
	
	--- Prototype ---
		LinkID INTEGER PRIMARY KEY NOT NULL
	-----------------
	
	
Database Column: Type

	--- Prototype ---
		Type INTEGER NOT NULL
	-----------------

	The type of link it is.  The value will be from <CodeClear.NaturalDocs.Engine.Links.LinkType>.


Database Column: TextOrSymbol

	--- Prototype ---
		TextOrSymbol TEXT NOT NULL
	-----------------

	If this is a Natural Docs link, this will be the plain text of the link.  If this is a type or class parent link, it 
	will be the symbol normalized as a <CodeClear.NaturalDocs.Engine.Symbols.SymbolString>.


Database Column: ContextID

	--- Prototype ---
		ContextID INTEGER NOT NULL
	-----------------

	The ID of the context the link appears in.


Database Column: FileID

	--- Prototype ---
		FileID INTEGER NOT NULL
	-----------------


Database Column: ClassID

	--- Prototype ---
		ClassID INTEGER NOT NULL
	-----------------


Database Column: LanguageID

	--- Prototype ---
		LanguageID INTEGER NOT NULL
	-----------------


Database Column: EndingSymbol

	--- Prototype ---
		EndingSymbol TEXT NOT NULL
	-----------------

	The ending segment of <TextOrSymbol>.  If this is a Natural Docs link, there may be additional ending 
	symbols that apply to this link in <CodeDB.AlternateLinkEndingSymbols>.


Database Column: TargetTopicID

	--- Prototype ---
		TargetTopicID INTEGER NOT NULL
	-----------------

	The topic ID this link resolves to, or zero if none.


Database Column: TargetClassID

	--- Prototype ---
		TargetClassID INTEGER NOT NULL
	-----------------
	
	The class ID of <TargetTopicID>, or zero if none.
	
	Why is a copy stored in this table instead of doing a join?  Because we need to be able to look up class
	parent links by target class in order to get a list of children, and this allows it to be indexed.	


Database Column: TargetScore

	--- Prototype ---
		TargetScore INTEGER NOT NULL
	-----------------

	The score of the link to <TargetTopicID>, or zero if there is none.  This is a 64-bit value.



Group: Indexes
_______________________________________________________________________________


Database Index: LinksByID

	--- Prototype ---
		LinkID INTEGER PRIMARY KEY NOT NULL
	-----------------

	Automatically created by LinkID being defined as a primary key.


Database Index: LinksByFileAndType

	--- Prototype ---
		CREATE INDEX LinksByFileAndType ON Links (FileID, Type)
	-----------------


Database Index: LinksByClass

	--- Prototype ---
		CREATE INDEX LinksByClass ON Links (ClassID, Type)
	-----------------


Database Index: LinksByEndingSymbols

	--- Prototype ---
		CREATE INDEX LinksByEndingSymbols ON Links (EndingSymbol)
	-----------------


Database Index: LinksByTargetTopicID

	--- Prototype ---
		CREATE INDEX LinksByTargetTopicID ON Links (TargetTopicID)
	-----------------


Database Index: LinksByTargetClassID

	--- Prototype ---
		CREATE INDEX LinksByTargetClassID ON Links (TargetClassID, Type)
	-----------------
